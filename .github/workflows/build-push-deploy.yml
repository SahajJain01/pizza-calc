name: Build, Push, and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: container-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build and push image
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name (lowercase)
        id: vars
        run: |
          REPO="${GITHUB_REPOSITORY#*/}"
          echo "image=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/${REPO,,}" >> "$GITHUB_OUTPUT"

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy (restart remote service)
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Prepare SSH
        env:
          NIX_SSH_HOST: ${{ secrets.NIX_SSH_HOST }}
          NIX_SSH_KEY: ${{ secrets.NIX_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Add host to known_hosts for strict checking
          ssh-keyscan -H "$NIX_SSH_HOST" >> ~/.ssh/known_hosts
          # Write private key
          echo "$NIX_SSH_KEY" | tr -d '\r' > ~/.ssh/id_ci
          chmod 600 ~/.ssh/id_ci

      - name: Restart docker-pizza on remote
        env:
          NIX_SSH_USER: ${{ secrets.NIX_SSH_USER }}
          NIX_SSH_HOST: ${{ secrets.NIX_SSH_HOST }}
        run: |
          ssh -i ~/.ssh/id_ci \
            -o StrictHostKeyChecking=yes \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            "${NIX_SSH_USER}@${NIX_SSH_HOST}" \
            'sudo systemctl restart docker-pizza'
